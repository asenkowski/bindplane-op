// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/observiq/bindplane-op/common"
	agent "github.com/observiq/bindplane-op/internal/agent"

	mock "github.com/stretchr/testify/mock"

	server "github.com/observiq/bindplane-op/internal/server"

	store "github.com/observiq/bindplane-op/internal/store"

	zap "go.uber.org/zap"
)

// BindPlane is an autogenerated mock type for the BindPlane type
type BindPlane struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *BindPlane) Config() *common.Server {
	ret := _m.Called()

	var r0 *common.Server
	if rf, ok := ret.Get(0).(func() *common.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Server)
		}
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *BindPlane) Logger() *zap.Logger {
	ret := _m.Called()

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// Manager provides a mock function with given fields:
func (_m *BindPlane) Manager() server.Manager {
	ret := _m.Called()

	var r0 server.Manager
	if rf, ok := ret.Get(0).(func() server.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.Manager)
		}
	}

	return r0
}

// Relayers provides a mock function with given fields:
func (_m *BindPlane) Relayers() *server.Relayers {
	ret := _m.Called()

	var r0 *server.Relayers
	if rf, ok := ret.Get(0).(func() *server.Relayers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.Relayers)
		}
	}

	return r0
}

// Store provides a mock function with given fields:
func (_m *BindPlane) Store() store.Store {
	ret := _m.Called()

	var r0 store.Store
	if rf, ok := ret.Get(0).(func() store.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Store)
		}
	}

	return r0
}

// Versions provides a mock function with given fields:
func (_m *BindPlane) Versions() agent.Versions {
	ret := _m.Called()

	var r0 agent.Versions
	if rf, ok := ret.Get(0).(func() agent.Versions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(agent.Versions)
		}
	}

	return r0
}

type mockConstructorTestingTNewBindPlane interface {
	mock.TestingT
	Cleanup(func())
}

// NewBindPlane creates a new instance of BindPlane. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBindPlane(t mockConstructorTestingTNewBindPlane) *BindPlane {
	mock := &BindPlane{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
